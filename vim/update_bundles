#!/usr/bin/env ruby

BUNDLE_DIR = File.expand_path('../bundle', __FILE__)
BUNDLE_FILE = File.expand_path('../bndls.txt', __FILE__)

def main
  # Fetch and install
  File.open(BUNDLE_FILE, "r") do |infile|
    until infile.eof?
      install infile.gets
    end
  end

  # Build extensions (extconf.rb)
  pattern = File.join(BUNDLE_DIR, "*", "ruby", "*", "extconf.rb")
  Dir.glob(pattern).each do |path|
    path.slice!(%r,/([^/]*)$,)
    cd(path) do
      puts "> Building #{path}"
      %x{ ruby extconf.rb }
      %x{ make }
    end
  end

  # Build install.sh
  pattern = File.join(BUNDLE_DIR, "*", "install.sh")
  Dir.glob(pattern).each do |path|
    path.slice!(%r,/([^/]*)$,)
    p path
    cd(path) do
      puts "> Building #{path}"
      %x{ bash install.sh }
    end
  end
end

require 'fileutils'
include FileUtils

METHODS = {
  :github => /github\.com/,
  :vim => /download_script/
}
def install(line)
  line.strip!

  if line.empty? or line[0] == "#"
    return
  end

  # call corresponding method according to url pattern
  METHODS.each do |meth, regex|
    send meth, line if regex =~ line
  end
end

def github(line)
  re = %r,/([^/]*)$,
  name = line[re, 1]
  url = line

  path = File.expand_path(name, BUNDLE_DIR)

  # pull if repo already exists
  if File.exists?(path)
    puts "> Pulling #{url}"
    cd(path) { %x{ git pull } } 
    return
  end

  # url must start with git://
  url.gsub!(/^http/, 'git') if url =~ /^git/

  puts "> Cloning #{url}"
  %x{ git clone #{url} #{path} }
end

def vim(line)
  line =~ /#/ or raise SyntaxError, "FATAL: No name found in #{line}!"

  re = /^(.*)#(.*)#(.*)$/
  url  = line[re, 1]
  name = line[re, 2]
  type = line[re, 3]

  path = File.expand_path("#{name}/#{type}/#{name}.vim", BUNDLE_DIR)
  unless File.exists? path
    puts "> Downloading #{url}"
    %x, curl -s -o #{path} --create-dirs #{url}` ,
  end
end

main
