" pathogen
call pathogen#infect()
call pathogen#helptags()

set nocp
set noesckeys

" appearance
syntax on
set number
set title
set linespace=1
set bg=light
color solarized

" neat mappings
inoremap <esc> <nop>
inoremap jk <esc>
nnoremap - <C-w>w
nnoremap _ <C-w>W
nnoremap <silent><leader>` :e#<cr>
nnoremap <silent><C-h> :let @/ = '  *$'<cr>
nnoremap <leader>ve :vs $MYVIMRC<cr>
nnoremap <leader>vs :so $MYVIMRC<cr>
nnoremap <silent><leader>s :w<cr>:so %<cr>
command! W :w
nnoremap <silent><leader>c :cn<cr>
nnoremap <silent><leader>l :lclose \| :cclose<cr>
command! AspellEN :!aspell -l en -c %
command! AspellFR :!aspell -l fr -c %

" quickly :source a range of VimL
vnoremap <leader>s :w! /tmp/sourced.vim \| :so /tmp/sourced.vim \| :!rm /tmp/sourced.vim &>/dev/null<cr><cr>

" iterm2 compat
imap [1;5A <c-up>
imap [1;5B <c-down>

" indent
set autoindent smartindent
set sw=4  " number of spaces inserted when using >> or <<
set sts=4 " number of spaces inserted when pressing Tab
set ts=8  " _displayed_ width of a Tab character
set expandtab " insert spaces instead of tabs

" search
set ignorecase " Ignore case when searching
set smartcase
set hlsearch " Highlight search things
set incsearch " Make search act like search in modern browsers
set magic " Set magic on, for regular expressions

" wrap
set wrap

" sets how many lines of history VIM has to remember
set history=300

" autocompletion in menu
set wildmenu
set wildignore+=*.o,*.obj,.git,*.pyc
set wildignore+=app/cache/*,app/logs/* " symfony2
set wildignore+=tmp/cache " rails
set wildignore+=.DS_Store,*.swp,*.swo
set wildignore+=*.class,*.scssc
set wildignore+=temp,node_modules " yeoman

" backups
set backup backupext=~ backupdir=~/backups/vim_backups/

" statusline
set laststatus=2
set statusline=\ %F%m%r%h\ %w\ \ Line:\ %l/%L:%c

set hidden " no need to write to disk when closing file

" filetype
filetype on
filetype plugin on
filetype indent on

" ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru,*.podspec,Podfile} set ft=ruby
au FileType ruby set sw=2 sts=2
au FileType eruby set sw=2 sts=2

" python
au FileType python set omnifunc=pythoncomplete#Complete

" html
au FileType html set omnifunc=htmlcomplete#CompleteTags sw=2 sts=2
let g:user_zen_leader_key = '<leader>,'
let g:html_indent_script1 = 'inc'
let g:html_indent_style1 = 'inc'

" haml
au BufNewFile,BufRead *.hamlc set ft=haml

" css
au FileType css set omnifunc=csscomplete#CompleteCSS
au FileType scss set omnifunc=csscomplete#CompleteCSS

" jinja
au BufNewFile,BufRead {*twig*,*jinja*} set ft=htmljinja

" javascript
au FileType javascript set omnifunc=javascriptcomplete#CompleteJS
                     \ sw=2 sts=2
au BufNewFile,BufRead *.ejs set ft=html
au BufNewFile,BufRead *.jst set ft=html | SyntasticToggleMode

" coffee
au BufNewFile,BufRead *.coffee set sw=2 sts=2 ts=2

" prolog
function! PrologRun()
    !osascript -e 'tell application "terminal" to do script "clear;cd \"%:p:h\";gprolog --entry-goal \"consult(%:r)\""'
    !osascript -e 'tell application "terminal" to activate'
endfunction
command! -nargs=* PrologRun call PrologRun()

" php
au FileType php set sw=2 sts=2

" go
au FileType go set noexpandtab sw=4 ts=4 sts=0

" java
au FileType java set sw=4 sts=4

" markdown
nnoremap <leader>m :!markdown % \| browser<cr><cr>
inoremap <leader>m :!markdown % \| browser<cr><cr>

" haskell
au BufEnter *.hs compiler ghc
let g:haddock_browser="/usr/bin/open"
let g:haddock_browser_callformat = "%s %s"

" makefile\
au FileType make set ts=2

" clojure
au FileType clojure let b:delimitMate_quotes = "\""
au BufRead,BufNewFile *.jar,*.war,*.ear,*.sar,*.rar set filetype=zip
au BufRead,BufNewFile *.clj nmap <buffer><unique><silent><LocalLeader>o <Plug>ClojureCloseResultBuffer.
au FileType clojure set sw=2 sts=2
au FileType clojure nnoremap <buffer><C-]> :call GoToCljTag()<cr>
au FileType clojure nnoremap <buffer><leader>ry :call VimClojureRunTests2()<cr>
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
let g:clojure_maxlines = 100
let g:clojure_fuzzy_indent = 1
au FileType clojure let g:clojure_fuzzy_indent_patterns += ['^fn', '^run*', '^fresh', '^project', '^facts\?', '^context']
au FileType clojure nnoremap <buffer><leader>ry :call VimClojureRunTests2()<cr>
nnoremap cme :call FireplaceMacroExpand()<cr>
nnoremap cpe :Eval<cr>
nnoremap crt :Eval (clojure.test/run-tests)<cr>

function! FireplaceMacroExpand()
  normal! ^
  let start = searchpair('(', '', ')', 'bcrn')
  let end = searchpair('(', '', ')', 'rn')
  let form = join(getline(start, end), "\n")
  let expr = "(do (import java.io.StringWriter)(use '[clojure.walk :only (macroexpand-all)])(let [w (StringWriter.)] (clojure.pprint/pprint (macroexpand-all '". form .") w) (.toString w)))"
  let result = fireplace#session_eval(expr)
  call append(end, split(result, '\\n'))
endfunction

" may not be needed with Fireplace
function! GoToCljTag()
  ruby <<
  cw = Vim.evaluate %q{expand("<cword>")}
  ma = cw.match %r,/([^/]+)$,
  cw = ma[1] if ma

  Vim.command "tag #{cw}"
.
endfunction

" ctrlp
let g:ctrlp_max_height = 25
let g:ctrlp_map = '<leader>p'
nnoremap <leader>b :CtrlPBuffer<cr>

" delimitMate
let delimitMate_expand_cr = 1
let delimitMate_balance_matchpairs = 1
let delimitMate_smart_quotes = 0

" NERDTree
nnoremap <silent><leader>n :NERDTreeToggle<cr>
nnoremap <silent><leader>f :NERDTreeFind<cr>
let NERDTreeIgnore=['^cache$', '^logs$', '\~$']

" Syntastic
" let g:syntastic_mode_map = { 'mode': 'active',
"                            \ 'active_filetypes': ['ruby', 'php'],
"                            \ 'passive_filetypes': ['puppet', 'ejs'] }

" eclim
nnoremap <silent><leader>ej :JavaDocPreview<cr>
au FileType java nnoremap gf :JavaSearch<cr>

" load other configz
source $HOME/.vim/local.vim
